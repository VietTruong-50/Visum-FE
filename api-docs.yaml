openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /visum/songs/{songId}:
    get:
      tags:
      - song-controller
      operationId: findSongById
      parameters:
      - name: songId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseOptionalSong'
    put:
      tags:
      - song-controller
      operationId: updateSong
      parameters:
      - name: songId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSong'
    delete:
      tags:
      - song-controller
      operationId: deleteSong
      parameters:
      - name: songId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSong'
  /visum/playlist/{playlistId}:
    put:
      tags:
      - user-controller
      operationId: updatePlaylist
      parameters:
      - name: playlistId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /visum/playlist:
    post:
      tags:
      - user-controller
      operationId: createNewPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePlaylist'
  /visum/playlist/{id}:
    get:
      tags:
      - user-controller
      operationId: getPlaylistById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePlaylistResponse'
    post:
      tags:
      - user-controller
      operationId: addSongToPlaylist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
    delete:
      tags:
      - user-controller
      operationId: deleteSongFromPlaylist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /visum/insertSong:
    post:
      tags:
      - song-controller
      operationId: createSong
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSong'
  /visum/insertListSong:
    post:
      tags:
      - song-controller
      operationId: createListSong
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SongDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseListSong'
  /visum/favorite/{songId}:
    post:
      tags:
      - user-controller
      operationId: addFavoriteSong
      parameters:
      - name: songId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSong'
    delete:
      tags:
      - user-controller
      operationId: deleteFavoriteSong
      parameters:
      - name: songId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSong'
  /visum/comment:
    post:
      tags:
      - user-controller
      operationId: createCommentDTO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseComment'
  /api/auth/signup:
    post:
      tags:
      - auth-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
  /api/auth/signin:
    post:
      tags:
      - auth-controller
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseJwtResponse'
  /visum/user:
    get:
      tags:
      - user-controller
      operationId: getCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
  /visum/topArtists:
    get:
      tags:
      - singer-controller
      operationId: getTopArtists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseListSinger'
  /visum/songs:
    get:
      tags:
      - song-controller
      operationId: getSong
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageSong'
  /visum/songs/category:
    get:
      tags:
      - song-controller
      operationId: findSongsByCategory
      parameters:
      - name: subCategoryName
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageSong'
  /visum/singer/{singerId}:
    get:
      tags:
      - singer-controller
      operationId: findSingerById
      parameters:
      - name: singerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSingerDTO'
  /visum/searchSongs:
    get:
      tags:
      - song-controller
      operationId: findSongsByTitle
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageSong'
  /visum/searchSingers:
    get:
      tags:
      - singer-controller
      operationId: findSingersByTitle
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageSinger'
  /visum/searchPlaylists:
    get:
      tags:
      - user-controller
      operationId: findPlaylistsByTitle
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePagePlaylistResponse'
  /visum/playlists:
    get:
      tags:
      - user-controller
      operationId: getAllPlaylistByUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseListPlaylistResponse'
  /visum/favorite:
    get:
      tags:
      - user-controller
      operationId: getListFavorites
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageSong'
  /visum/comments/{songId}:
    get:
      tags:
      - user-controller
      operationId: getAllComments
      parameters:
      - name: songId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      - name: orderBy
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageCommentDTO'
  /visum/categories:
    get:
      tags:
      - category-controller
      operationId: getAllCategory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseListCategory'
  /visum/playlists/{playlistId}:
    delete:
      tags:
      - user-controller
      operationId: deletePlaylist
      parameters:
      - name: playlistId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePlaylist'
  /visum/comment/{id}:
    delete:
      tags:
      - user-controller
      operationId: deleteComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseComment'
components:
  schemas:
    SongDTO:
      type: object
      properties:
        songName:
          type: string
        duration:
          type: integer
          format: int32
        image:
          type: array
          items:
            type: string
            format: byte
        imageName:
          type: string
        singer_id:
          type: integer
          format: int64
        composer_id:
          type: integer
          format: int64
        subCategory_id:
          type: integer
          format: int64
    ApiResponseSong:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Song'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        createdAt:
          type: string
    Composer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        composerName:
          type: string
        information:
          type: string
    Singer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        singerName:
          type: string
        description:
          type: string
    Song:
      type: object
      properties:
        id:
          type: integer
          format: int64
        songName:
          type: string
        duration:
          type: number
          format: double
        image:
          type: array
          items:
            type: string
            format: byte
        imageName:
          type: string
        views:
          type: integer
          format: int32
        singer:
          $ref: '#/components/schemas/Singer'
        composer:
          $ref: '#/components/schemas/Composer'
        subCategory:
          $ref: '#/components/schemas/SubCategory'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    SubCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
        subCategoryName:
          type: string
    PlaylistDTO:
      type: object
      properties:
        playlistName:
          type: string
    ApiResponseObject:
      type: object
      properties:
        result:
          type: object
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponsePlaylist:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Playlist'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Playlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        playlistName:
          type: string
        songList:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    ApiResponseListSong:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    CommentDTO:
      required:
      - commentText
      - songId
      - userId
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        username:
          type: string
        userAvatar:
          type: string
        songId:
          type: integer
          format: int64
        commentText:
          type: string
        createdAt:
          type: string
    ApiResponseComment:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Comment'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    UserDTO:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        gender:
          type: string
          enum:
          - MALE
          - FEMALE
          - OTHER
        birthOfDate:
          type: string
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
        mobile:
          pattern: "^0\\d{9}$"
          type: string
        email:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
    ApiResponseUser:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/User'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        avatarImage:
          type: array
          items:
            type: string
            format: byte
        imageName:
          type: string
        birthOfDate:
          type: string
          format: date-time
        genderEnum:
          type: string
          enum:
          - MALE
          - FEMALE
          - OTHER
        email:
          type: string
        mobile:
          type: string
        status:
          type: string
        playlists:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ApiResponseJwtResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JwtResponse'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    JwtResponse:
      type: object
      properties:
        jwtToken:
          type: string
        id:
          type: integer
          format: int64
        username:
          type: string
        roles:
          type: array
          items:
            type: string
    ApiResponseListSinger:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Singer'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponsePageSong:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageSong'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageSong:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    ApiResponseOptionalSong:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Song'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponseSingerDTO:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/SingerDTO'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    SingerDTO:
      type: object
      properties:
        singerName:
          type: string
        description:
          type: string
        songList:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    ApiResponsePageSinger:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageSinger'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageSinger:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Singer'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponsePagePlaylistResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PagePlaylistResponse'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PagePlaylistResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PlaylistResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        playlistName:
          type: string
        userName:
          type: string
        songList:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    ApiResponseListPlaylistResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistResponse'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponsePlaylistResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PlaylistResponse'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponsePageCommentDTO:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageCommentDTO'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageCommentDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponseListCategory:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        categoryName:
          type: string
        subCategories:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubCategory'